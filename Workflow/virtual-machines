#!/usr/bin/osascript -l JavaScript

// String -> String
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

// String... -> String
function runCommand(...arguments) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath(arguments[0])
  task.arguments = arguments.slice(1)
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return stringOut
}

function run(argv) {
  // Get tart path
  const tartPath = envVar("PATH")
    .split(":")
    .map(path => path + "/tart")
    .find(path => $.NSFileManager.defaultManager.isExecutableFileAtPath(path))

  if (tartPath === undefined) return JSON.stringify({items: [{
    title: "Did not find 'tart' executable in PATH",
    valid: false
  }]})

  // Get VMs list
  const ignored = argv[0].split("\n")

  const vmList = runCommand(tartPath, "list")
    .split("\n")
    .slice(1)
    .filter(entry => entry.length > 0)
    .map(entry => entry.split("\t"))
    .filter(entry => !ignored.includes(entry[1]))

  // If no VMs found
  if (vmList.length === 0) return JSON.stringify({items: [{
    title: "No matching virtual machines found",
    valid: false
  }]})

  // List VMs
  const sfItems = vmList.map(vmDetails => {
    const vmType = vmDetails[0]
    const vmName = vmDetails[1]

    return {
      uid: vmName + vmType,
      title: vmName,
      subtitle: vmType,
      arg: vmName
    }
  })

  return JSON.stringify({items: sfItems})
}
