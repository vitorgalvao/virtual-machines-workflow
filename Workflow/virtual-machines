#!/usr/bin/osascript -l JavaScript

// String -> String
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

// String... -> String
function runCommandJSON(...arguments) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath("/usr/bin/env")
  task.arguments = arguments
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return JSON.parse(stringOut)
}

function run(argv) {
  // Get VMs list
  const ignored = argv
  const vmList = runCommandJSON("tart", "list", "--format", "json").filter(entry => !ignored.includes(entry["Name"]))

  // If no VMs found
  if (vmList.length === 0) return JSON.stringify({items: [{
    title: "No matching virtual machines found",
    valid: false,
    mods: { fn: { valid: true } } // Modifier to reset ignored VMs
  }]})

  // List VMs
  const sfItems = vmList.map(vmDetails => {
    return {
      uid: vmDetails["Name"] + vmDetails["Source"],
      title: vmDetails["Name"],
      subtitle: vmDetails["Source"],
      arg: vmDetails["Name"],
    }
  })

  return JSON.stringify({items: sfItems})
}
