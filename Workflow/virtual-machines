#!/usr/bin/osascript -l JavaScript

// String -> String
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

// String... -> String
function runCommandJSON(...arguments) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath("/usr/bin/env")
  task.arguments = arguments
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return JSON.parse(stringOut)
}

function run(argv) {
  // Get VMs list
  const inputVMs = argv.slice(2) // VMs given as arguments
  const nativeMods = argv[0] === "native" // Either "native" to show modifiers from Alfred connections, or "script" to use modifiers set in this script
  const hideInput = argv[1] === "hide" // Either "hide" to show all except "inputVMs", or "show" for the reverse
  const allVMs = runCommandJSON("tart", "list", "--format", "json")
  const matchingVMs = hideInput ?
    allVMs.filter(entry => !inputVMs.includes(entry["Name"])) :
    allVMs.filter(entry => inputVMs.includes(entry["Name"]))

  // Modifiers
  const modifiers = nativeMods ?
    {} : // Ignore custom modifier and only show mods set in workflow connections
    {
      cmd: { variables: { action: "overwrite" }, subtitle: "Overwrite With Another VM" },
      alt: { variables: { action: "clone" }, subtitle: "Clone VM" },
      ctrl: { variables: { action: "delete" }, subtitle: "Delete VM" },
      fn: hideInput ?
        { variables: { action: "list_ignored" }, subtitle: "Switch to Ignored VMs List" } :
        { variables: { action: "list_main" }, subtitle: "Switch to Main VMs List" },
      shift: hideInput ?
        { variables: { action: "ignore" }, subtitle: "Ignore VM" } :
        { variables: { action: "unignore" }, subtitle: "Unignore VM" },
    }

  // If no VMs found
  if (matchingVMs.length === 0) return JSON.stringify({items: [{
    title: "No matching virtual machines found",
    valid: false,
    mods: { fn: modifiers["fn"] } // Modifier to switch list
  }]})

  // List VMs
  const sfItems = matchingVMs.map(vmDetails => {
    return {
      variables: { action: "run" },
      uid: vmDetails["Name"] + vmDetails["Source"],
      title: vmDetails["Name"],
      subtitle: vmDetails["Source"],
      arg: vmDetails["Name"],
      mods: modifiers
    }
  })

  return JSON.stringify({items: sfItems})
}
